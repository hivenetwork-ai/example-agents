# generated by datamodel-codegen:
#   filename:  framework_span_attributes.json
#   timestamp: 2024-05-23T16:57:21+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, ConfigDict, Field


class FrameworkSpanAttributes(BaseModel):
    model_config = ConfigDict(extra="allow")

    langtrace_service_name: str = Field(..., alias="langtrace.service.name")
    langtrace_service_type: str = Field(..., alias="langtrace.service.type")
    langtrace_service_version: Optional[str] = Field(
        None, alias="langtrace.service.version"
    )
    langtrace_sdk_name: str = Field(..., alias="langtrace.sdk.name")
    langtrace_version: str = Field(..., alias="langtrace.version")
    langchain_task_name: Optional[str] = Field(None, alias="langchain.task.name")
    langchain_inputs: Optional[str] = Field(None, alias="langchain.inputs")
    langchain_outputs: Optional[str] = Field(None, alias="langchain.outputs")
    langgraph_entrypoint: Optional[str] = Field(None, alias="langgraph.entrypoint")
    langgraph_node: Optional[str] = Field(None, alias="langgraph.node")
    langgraph_edge: Optional[str] = Field(None, alias="langgraph.edge")
    langgraph_finishpoint: Optional[str] = Field(None, alias="langgraph.finishpoint")
    langgraph_task_name: Optional[str] = Field(None, alias="langgraph.task.name")
    llamaindex_task_name: Optional[str] = Field(None, alias="llamaindex.task.name")
    llamaindex_inputs: Optional[str] = Field(None, alias="llamaindex.inputs")
    llamaindex_outputs: Optional[str] = Field(None, alias="llamaindex.outputs")
    langtrace_testId: Optional[str] = Field(None, alias="langtrace.testId")
